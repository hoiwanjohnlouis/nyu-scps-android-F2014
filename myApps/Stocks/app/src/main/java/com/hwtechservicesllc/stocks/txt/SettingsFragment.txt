package com.hwtechservicesllc.stocks.fragments;

/*
    Copyright (c) 2014  Hoi Wan Louis

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/


import android.app.Activity;
import android.os.Bundle;
import android.preference.PreferenceFragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import com.hwtechservicesllc.stocks.R;

public class SettingsFragment extends PreferenceFragment {

    // default fragment bundle key 1: ARG_ITEM_STRING, aka ARG_PARAM1
    private static final String ARG_RETURN_ID = FragmentConstants.RETURN_MESSAGE;

    //
    // callback interface/method
    //
    private OnFragmentInteractionListener mListener;


    /****************************************************************
     *
     * Start of non-template variables
     *
     ****************************************************************/

    //
    // logging purposes
    //
    private final String DEBUG_TAG = this.getClass().getSimpleName();


    public static SettingsFragment newInstance() {
        Log.i("SettingsFragment", "in newInstance()");
        SettingsFragment fragment = new SettingsFragment();
        return fragment;
    }

    public SettingsFragment() {
        Log.i(DEBUG_TAG, "in Constructor");
        // Required empty public constructor
    }

    // creates preferences GUI from preferences.xml file in res/xml
    @Override
    public void onCreate(Bundle savedInstanceState) {
        Log.v(DEBUG_TAG, "in onCreate()");
        super.onCreate(savedInstanceState);
        addPreferencesFromResource(R.xml.preferences);
    }


    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Bundle settingsFragmentInterfaceBundle) {
        Log.i(DEBUG_TAG, "in onButtonPressed()");
        if (mListener != null) {
            mListener.onSettingsFragmentCompleted(settingsFragmentInterfaceBundle);
        }
    }


    @Override
    public void onAttach(Activity activity) {
        Log.i(DEBUG_TAG, "in onAttach()");
        super.onAttach(activity);
        try {
            mListener = (OnFragmentInteractionListener) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        Log.i(DEBUG_TAG, "in onDetach()");
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    //
    // Standard function provided by fragment template
    //
    public interface OnFragmentInteractionListener {

        // called after update completed so the item/symbol can be redisplayed
        public void onSettingsFragmentCompleted(Bundle settingsFragmentInterfaceBundle);

    } // end interface OnFragmentInteractionListener

}   // end of SettingsFragment
