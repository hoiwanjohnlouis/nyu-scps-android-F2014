package com.hwtechservicesllc.stocks.fragments;

/*
    Copyright (c) 2015  HW Tech Services, Inc., LLC

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/


import android.app.Activity;
import android.app.AlertDialog;
import android.app.ListFragment;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.CursorAdapter;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;

import com.hwtechservicesllc.stocks.database.Database;
import com.hwtechservicesllc.stocks.database.DatabaseConnector;
import com.hwtechservicesllc.stocks.R;
import com.hwtechservicesllc.stocks.SettingsActivity;


/**
 * A simple {@link android.app.Fragment} subclass.
 */
public class InventoryFragment extends ListFragment {

    private final String DEBUG_TAG = this.getClass().getSimpleName();

    private final String asColumnsToReturn[] = {
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio._ID,
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio.SYMBOL,
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio.OPENING_PRICE,
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio.PREVIOUS_CLOSING_PRICE,
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio.BID_PRICE,
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio.ASK_PRICE,
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio.LAST_TRADE_PRICE,
            Database.Portfolio.PORTFOLIO_TABLE_NAME + "." + Database.Portfolio.LAST_TRADE_TIME
    };

    private final String fromDBColumns[] =  {
            Database.Portfolio.SYMBOL,
            Database.Portfolio.OPENING_PRICE,
            Database.Portfolio.PREVIOUS_CLOSING_PRICE,
            Database.Portfolio.BID_PRICE,
            Database.Portfolio.ASK_PRICE,
            Database.Portfolio.LAST_TRADE_PRICE,
            Database.Portfolio.LAST_TRADE_TIME
    };

    private final int toRIds[] = {
            R.id.TextView_symbol,
            R.id.TextView_opening_price,
            R.id.TextView_previous_closing_price,
            R.id.TextView_bid_price,
            R.id.TextView_ask_price,
            R.id.TextView_last_trade_price,
            R.id.TextView_last_trade_time
    };


    private String defaultOpeningPrice = ""+R.string.default_opening_price;
    private String defaultClosingPrice = ""+R.string.default_closing_price;
    private String defaultBidPrice = ""+R.string.default_bid_price;
    private String defaultBidSize = ""+R.string.default_bid_size;
    private String defaultAskPrice = ""+R.string.default_ask_price;
    private String defaultAskSize = ""+R.string.default_ask_size;
    private String defaultTradePrice = ""+R.string.default_trade_price;
    private String defaultTradeQuantity = ""+R.string.default_trade_quantity;
    private String defaultTradeDate = ""+R.string.default_trade_date;
    private String defaultTradeTime = ""+R.string.default_trade_time;
    private String defaultInsertDateTime = R.string.default_trade_date+"_"+R.string.default_trade_time;


    private InventoryFragmentListener listener;

    // the ListActivity's ListView
    private ListView listView;
    // adapter for ListView
    private CursorAdapter cursorAdapter;

    private ImageButton saveButton;


    //
    //
    //
    public InventoryFragment() {
        Log.i(DEBUG_TAG, "in InventoryFragment()");
        // Required empty public constructor
    } // end constructor InventoryFragment()


    //
    // set InventoryFragmentListener when Fragment is attached
    //
    @Override
    public void onAttach(Activity activity) {
        Log.i(DEBUG_TAG, "in onAttach()");
        super.onAttach(activity);

        // init callback to interface implementation
        listener = (InventoryFragmentListener) activity;
    } // end method onAttach()


    //
    // remove InventoryFragmentListener when Fragment is detached
    //
    @Override
    public void onDetach() {
        Log.i(DEBUG_TAG, "in onDetach()");
        super.onDetach();

        // clean up callback for interface implementation
        listener = null;
    } // end method onDetach


    //
    // called when Fragment's view needs creation
    //
    @Override
    public View onCreateView(LayoutInflater inflater,
                             ViewGroup container,
                             Bundle savedInstanceState) {
        Log.i(DEBUG_TAG, "in onCreateView()");
        super.onCreateView(inflater, container, savedInstanceState);

        // inflate DetailFragment's layout
        View view = inflater.inflate(R.layout.inventory_fragment, container, false);
        // save fragment across configuration changes
        setRetainInstance(true);
        // this fragment has menu items to display
        setHasOptionsMenu(true);

        return view;
    } // end method onCreateView


    //
    // called after View is created
    //
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        Log.i(DEBUG_TAG, "in onViewCreated()");
        super.onViewCreated(view, savedInstanceState);

        // save fragment across configuration changes
        setRetainInstance(true);
        // this fragment has menu items to display
        setHasOptionsMenu(true);
        // set text to display when there are no contacts
        setEmptyText(getResources().getString(R.string.fragment_no_items));

        // get ListView reference and configure it (the ListView)
        listView = getListView();
        listView.setOnItemClickListener(viewItemListener);
        listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);

        // map each item/symbol to a TextView in the ListView layout
        cursorAdapter =
                new SimpleCursorAdapter(
                        getActivity(),
                        R.layout.app_item,
                        null,
                        fromDBColumns,
                        toRIds,
                        0);
        // set adapter that supplies data
        setListAdapter(cursorAdapter);
    } // end method onViewCreated()


    //
    // respond to user touching an item/symbol in the ListView
    //
    AdapterView.OnItemClickListener viewItemListener = new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            Log.i(DEBUG_TAG, "in viewItemListener()/onItemClick()");

            //
            // let the callback take care of this
            //
            listener.onSymbolSelected(id);
        }
    };


    //
    // when fragment resumes, use  GetContactsTask to load contacts
    //
    @Override
    public void onResume() {
        Log.i(DEBUG_TAG, "in onResume()");
        super.onResume();
        new GetItemsAsyncTask().execute((Object[]) null);
    } // end method onResume()


    //
    // when fragment resumes, use  GetContactsTask to load contacts
    //
    @Override
    public void onStop() {
        Log.i(DEBUG_TAG, "in onStop()");

        // get current database cursor
        Cursor cursor = cursorAdapter.getCursor();
        // adapter now has no cursor (basically housekeeping and cleanup
        cursorAdapter.changeCursor(null);

        // release the cursor if needed
        if (cursor != null) {
            cursor.close();
        }

        super.onStop();
    } // end method onStop()


    //
    // display this fragment's menu items
    //
    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        Log.i(DEBUG_TAG, "in onCreateOptionsMenu()");
        // Inflate the menu; this adds items to the action bar if it is present.
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.fragment_inventory_menu, menu);
    } // end method onCreateOptionsMenu()


    //
    // Handle action bar item clicks here. The action bar will
    // automatically handle clicks on the Home/Up button, so long
    // as you specify a parent activity in AndroidManifest.xml.
    //
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        Log.i(DEBUG_TAG, "in onOptionsItemSelected()");

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        AlertDialog dialog;

        boolean selected;
        int id = item.getItemId();

        switch (id)
        {
            case R.id.main_activity_settings_id:;
                Intent settingsIntent = new Intent(getActivity(), SettingsActivity.class);
                startActivity(settingsIntent);
                selected = true;
                break;
            case R.id.main_activity_help_id:;
                builder.setTitle(R.string.main_activity_help_title);
                builder.setMessage(R.string.main_activity_help_data);
                dialog=builder.create();
                dialog.show();
                selected = true;
                break;
            case R.id.main_activity_about_id:;
                builder.setTitle(R.string.main_activity_about_title);
                builder.setMessage(R.string.main_activity_about_data);
                dialog=builder.create();
                dialog.show();
                selected = true;
                break;

            default:;
                selected = super.onOptionsItemSelected(item);
                break;
        }

        return selected;
    } // end method onOptionsItemSelected()


    //
    // update data set
    //
    public void updateListView() {
        Log.i(DEBUG_TAG, "in updateListView()");
        new GetItemsAsyncTask().execute((Object[]) null);
    } // end method updateListView()


    //
    // *****************************************************
    // perform database query outside the GUI thread
    // *****************************************************
    private class GetItemsAsyncTask extends AsyncTask<Object, Object, Cursor> {

        DatabaseConnector databaseConnector = new DatabaseConnector(getActivity());

        //
        // open DB and return a cursor for all contacts
        //
        @Override
        protected Cursor doInBackground(Object... params) {
            Log.i(DEBUG_TAG, "in GetItemsAsyncTask()/doInBackground()");
            databaseConnector.open();
            return databaseConnector.getAllItems();
        } // end method doInBackground()

        //
        // use cursor returned from the doInBackground method
        //
        @Override
        protected void onPostExecute(Cursor results) {
            Log.i(DEBUG_TAG, "in GetItemsAsyncTask()/onPostExecute()");
            cursorAdapter.changeCursor(results);
            databaseConnector.close();
        } // end method onPostExecute()

    } // end inner class GetContactsTask()


}
